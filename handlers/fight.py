from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from storage import db
from services.pig_service import fight
from services.pig_service import check_level_up, get_rank
import random

# –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–º'—è—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–∞—Ä–∏–Ω–≥—ñ–≤
pending_sparrings = {}

async def sparring_request_handler(message: types.Message):
    user_id = message.from_user.id
    pig = db.get_pig(user_id)

    if not pig:
        await message.answer("–¢–∏ —â–µ –Ω–µ –º–∞—î—à —Ö—Ä—è–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –≤–∏–∫–ª–∏–∫—É
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫ üêñ", callback_data=f"accept_sparring:{user_id}")

    pending_sparrings[user_id] = True  # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ, —â–æ –≤–∏–∫–ª–∏–∫ –∞–∫—Ç–∏–≤–Ω–∏–π

    await message.answer(
        f"üê∑ {pig.name} –≤–∏–∫–ª–∏–∫–∞—î –Ω–∞ —Å–ø–∞—Ä–∏–Ω–≥!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫!",
        reply_markup=builder.as_markup()
    )

async def sparring_accept_handler(callback: types.CallbackQuery):
    data = callback.data
    if not data.startswith("accept_sparring:"):
        return

    opponent_id = int(data.split(":")[1])
    challenger_id = callback.from_user.id

    if opponent_id == challenger_id:
        await callback.answer("–ù–µ –º–æ–∂–Ω–∞ –ø—Ä–∏–π–º–∞—Ç–∏ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –≤–∏–∫–ª–∏–∫!")
        return

    if opponent_id not in pending_sparrings:
        await callback.answer("–¶–µ–π –≤–∏–∫–ª–∏–∫ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∞–±–æ –±—É–≤ –ø—Ä–∏–π–Ω—è—Ç–∏–π.")
        return

    pig1 = db.get_pig(opponent_id)
    pig2 = db.get_pig(challenger_id)

    if not pig1 or not pig2:
        await callback.message.answer("–û–¥–∏–Ω –∑ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –º–∞—î —Ö—Ä—è–∫–∞!")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–¥–æ—Ä–æ–≤'—è
    if pig1.health < 13:
        await callback.answer("–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–¥–æ—Ä–æ–≤'—è –¥–ª—è —Å–ø–∞—Ä–∏–Ω–≥—É! –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 13 ‚ù§Ô∏è.", show_alert=True)
        return
    
    if pig2.health < 13:
        await callback.answer("–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–¥–æ—Ä–æ–≤'—è –¥–ª—è —Å–ø–∞—Ä–∏–Ω–≥—É! –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 13 ‚ù§Ô∏è.", show_alert=True)
        return

    # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫ —ñ –∫–Ω–æ–ø–∫—É
    del pending_sparrings[opponent_id]

    await callback.message.edit_reply_markup(reply_markup=None)  # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É

    # –ë—ñ–π
    winner, loser, xp_transfer = fight(pig1, pig2)



    db.save_pig(pig1)
    db.save_pig(pig2)

    text = (
        f"‚öîÔ∏è –°–ø–∞—Ä–∏–Ω–≥ –º—ñ–∂ {pig1.name} —Ç–∞ {pig2.name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner.name}\n"
        f"‚ûï –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î {xp_transfer} XP.\n"
        f"‚ûñ –ü–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π –≤—Ç—Ä–∞—á–∞—î {xp_transfer} XP."
    )

    level_ups = check_level_up(winner)
    if level_ups > 0:
        text += f"\nüèÖ –¢–≤—ñ–π —Ö—Ä—è–∫ –ø—ñ–¥–Ω—è–≤ —Ä—ñ–≤–µ–Ω—å –Ω–∞ {level_ups}!\n‚ûï –°–∏–ª–∞ +{level_ups}, –ó–¥–æ—Ä–æ–≤'—è +{level_ups * 10}\n"
     # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–∏–π —Ä–∞–Ω–≥
    if winner.level in (5, 10, 20):
        new_rank = get_rank(winner)
        text += f"üéñÔ∏è –í—ñ—Ç–∞—î–º–æ! –¢–≤—ñ–π —Ö—Ä—è–∫ –¥–æ—Å—è–≥ —Ä–∞–Ω–≥—É: {new_rank}!"
    await callback.message.answer(text)
    await callback.answer()
