import asyncio
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from storage import db
from services.pig_service import fight, check_level_up, get_rank
import random

# –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–º'—è—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–∞—Ä–∏–Ω–≥—ñ–≤
pending_sparrings = {}

async def sparring_request_handler(message: types.Message):
    user_id = message.from_user.id
    pig = db.get_pig(user_id)

    if not pig:
        await message.answer("–¢–∏ —â–µ –Ω–µ –º–∞—î—à —Ö—Ä—è–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫ üêñ", callback_data=f"accept_sparring:{user_id}")
    pending_sparrings[user_id] = True

    await message.answer(
        f"üê∑ {pig.name} –≤–∏–∫–ª–∏–∫–∞—î –Ω–∞ —Å–ø–∞—Ä–∏–Ω–≥!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫!",
        reply_markup=builder.as_markup()
    )

async def sparring_accept_handler(callback: types.CallbackQuery):
    data = callback.data
    if not data.startswith("accept_sparring:"):
        return

    opponent_id = int(data.split(":")[1])
    challenger_id = callback.from_user.id

    if opponent_id == challenger_id:
        await callback.answer("–ù–µ –º–æ–∂–Ω–∞ –ø—Ä–∏–π–º–∞—Ç–∏ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –≤–∏–∫–ª–∏–∫!", show_alert=True)
        return

    if opponent_id not in pending_sparrings:
        await callback.answer("–¶–µ–π –≤–∏–∫–ª–∏–∫ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –∞–±–æ –±—É–≤ –ø—Ä–∏–π–Ω—è—Ç–∏–π.", show_alert=True)
        return

    pig1 = db.get_pig(opponent_id)
    pig2 = db.get_pig(challenger_id)

    if not pig1 or not pig2:
        await callback.answer("–û–¥–∏–Ω —ñ–∑ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –º–∞—î —Ö—Ä—è–∫–∞!", show_alert=True)
        return

    if pig1.health < 13 or pig2.health < 13:
        await callback.answer("–û–±–∏–¥–≤–∞ —Ö—Ä—è–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 13 ‚ù§Ô∏è!", show_alert=True)
        return

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ Telegram'—É –º–∏—Ç—Ç—î–≤–æ, —â–æ–±–∏ —É–Ω–∏–∫–Ω—É—Ç–∏ timeouts
    await callback.answer("–°—É–ø–µ—Ä–Ω–∏–∫ –ø—Ä–∏–π–Ω—è–≤ –≤–∏–∫–ª–∏–∫! –ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è –±—ñ–π...")

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    del pending_sparrings[opponent_id]
    await callback.message.edit_reply_markup(reply_markup=None)

    # –°—Ü–µ–Ω–∞—Ä—ñ—ó –±–æ—é
    templates = [
        f"{pig1.name} –∑—Ä–æ–±–∏–≤ –ø–µ—Ä—à–∏–π —Å—Ç—Ä–∏–±–æ–∫ —ñ –≤–¥–∞—Ä–∏–≤ —Ä–æ–≥–æ–º!",
        f"{pig2.name} —É—Ö–∏–ª–∏–≤—Å—è —ñ –Ω–∞–Ω—ñ—Å –∫–æ–Ω—Ç—Ä—É–¥–∞—Ä!",
        f"{pig1.name} –ø—Ä–æ–±—É—î –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω—É –∞—Ç–∞–∫—É ‚Äî —ñ—Ä–∂–µ —è–∫ —Å–∫–∞–∂–µ–Ω–∏–π!",
        f"{pig2.name} –∫–∏–¥–∞—î —à–º–∞—Ç–æ–∫ –±—É—Ä—è–∫–∞ –≤ –æ–±–ª–∏—á—á—è —Å—É–ø–µ—Ä–Ω–∏–∫—É!",
        f"–û–±–∏–¥–≤–∞ —Ö—Ä—è–∫–∏ –∫—Ä—É–∂–ª—è—é—Ç—å —É –ø–æ—à—É–∫–∞—Ö —Å–ª–∞–±–∫–æ–≥–æ –º—ñ—Å—Ü—è...",
        f"{pig1.name} –≤—Ç—Ä–∞—á–∞—î —Ä—ñ–≤–Ω–æ–≤–∞–≥—É, –∞–ª–µ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è!",
        f"{pig2.name} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ —É–¥–∞—Ä –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–æ–º–µ–Ω—Ç!",
        f"–ë–∏—Ç–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —É –∑–∞—Ç—è–∂–Ω—É –±–æ—Ä–æ—Ç—å–±—É –∑–∞ –¥–æ–º—ñ–Ω—É–≤–∞–Ω–Ω—è...",
        f"{pig1.name} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å–≤–æ—é –º–∞—Å—É, —â–æ–± –∑—ñ—à—Ç–æ–≤—Ö–Ω—É—Ç–∏ —Å—É–ø–µ—Ä–Ω–∏–∫–∞!",
        f"{pig2.name} –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –Ω–µ–π–º–æ–≤—ñ—Ä–Ω—É –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å!",
        f"{pig1.name} –≤–¥–∞—î—Ç—å—Å—è —É –≤—ñ–¥—á–∞–π–¥—É—à–Ω—É –∞—Ç–∞–∫—É ‚Äî —ñ –º–∞–π–∂–µ –≤–ª—É—á–∞—î!",
        f"{pig2.name} –≤–ø–∞–¥–∞—î —É –ª—é—Ç—å —ñ –Ω–µ —Å—Ç—Ä–∏–º—É—î —Å–µ–±–µ!",
        f"–ì–ª—è–¥–∞—á—ñ –∞–ø–ª–æ–¥—É—é—Ç—å ‚Äî —Ç–∞–∫–æ—ó –±–∏—Ç–≤–∏ —â–µ –Ω–µ –±–∞—á–∏–ª–∏!",
        f"{pig1.name} –º–∞–π—Å—Ç–µ—Ä–Ω–æ –æ–±–º–∞–Ω—É–≤ —Ä—É—Ö–æ–º —ñ –Ω–∞–Ω—ñ—Å —É–¥–∞—Ä –∑ —Ñ–ª–∞–Ω–≥—É!",
        f"{pig2.name} –ø—ñ–¥–Ω—ñ–º–∞—î –∫–ª—É–± –ø–∏–ª—É —ñ –∑–Ω–∏–∫–∞—î –Ω–∞ –º–∏—Ç—å!",
        f"–í –æ–±–æ—Ö –Ω–∞ –º–æ—Ä–¥–∞—Ö ‚Äî —Ä—ñ—à—É—á—ñ—Å—Ç—å —ñ –∑–ª—ñ—Å—Ç—å!",
        f"{pig1.name} –ø–æ–∫–∞–∑—É—î —Ç–∞–∫—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —ñ —Ä–æ–±–∏—Ç—å –∫—Ä–æ–∫ –Ω–∞–∑–∞–¥...",
        f"{pig2.name} –∑–∞–≥–∞–Ω—è—î —Å—É–ø–µ—Ä–Ω–∏–∫–∞ –≤ –∫—É—Ç!",
        f"–°—É–¥–¥—è (–≥—É—Å–∞–∫) –≥—É—á–Ω–æ –∫—Ä—è—á–µ ‚Äî –±–∏—Ç–≤–∞ —Ç—Ä–∏–≤–∞—î!",
        f"{pig1.name} –≤—ñ–¥–≤–æ–ª—ñ–∫–∞—î —É–≤–∞–≥—É, —Ö—Ä—é–∫–∞—é—á–∏ –Ω–∞ –ø—É–±–ª—ñ–∫—É!",
        f"{pig2.name} —Ç–∏—Å–Ω–µ —Å–∏–ª–æ—é, –∞–ª–µ –≤—Ç—Ä–∞—á–∞—î –ø–∏–ª—å–Ω—ñ—Å—Ç—å!",
        f"–ë–∏—Ç–≤–∞ –¥–æ—Å—è–≥–ª–∞ –∫—É–ª—å–º—ñ–Ω–∞—Ü—ñ—ó ‚Äî –≤–∏—Ä—ñ—à–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è...",
        f"–ó–¥–∞—î—Ç—å—Å—è, –æ–¥–∏–Ω –∑ —Ö—Ä—è–∫—ñ–≤ –ø–æ—á–∏–Ω–∞—î –≤—Ç–æ–º–ª—é–≤–∞—Ç–∏—Å—å...",
        f"{pig1.name} –≤–∏—á—ñ–∫—É—î –º–æ–º–µ–Ω—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–∏–≤–∫–∞!",
        f"{pig2.name} –π–¥–µ –≤–∞-–±–∞–Ω–∫!"
    ]

    selected_events = random.sample(templates, 5)
    for line in selected_events:
        await callback.message.answer(line)
        await asyncio.sleep(3)

    # –ë—ñ–π —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    winner, loser, xp_transfer = fight(pig1, pig2)
    db.save_pig(pig1)
    db.save_pig(pig2)

    if winner is None:
        await callback.message.answer("ü§ù –ë—ñ–π –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è –Ω—ñ—á–∏—î—é! –û–±–∏–¥–≤–∞ —Ö—Ä—è–∫–∏ –≤—Ç–æ–º–ª–µ–Ω—ñ, –∞–ª–µ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –≥–æ—Ä–¥–∏–º–∏.")
        return


    result_text = (
        f"\nüèÅ –°–ø–∞—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner.name}\n"
        f"‚ûï +{xp_transfer} XP –¥–ª—è {winner.name}\n"
        f"‚ûñ -{xp_transfer} XP –¥–ª—è {loser.name}"
    )

    level_ups = check_level_up(winner)
    if level_ups:
        result_text += f"\nüìà –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –Ω–∞ {level_ups}!"
        if winner.level in (5, 10, 20):
            result_text += f"\nüéñÔ∏è –ù–æ–≤–∏–π —Ä–∞–Ω–≥: {get_rank(winner)}!"

    await callback.message.answer(result_text)
