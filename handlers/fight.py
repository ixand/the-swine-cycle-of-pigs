import asyncio
import random
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from storage import db
from services.pig_service import fight, check_level_up, get_rank

# –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–∞–º'—è—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–∞—Ä–∏–Ω–≥—ñ–≤
pending_sparrings = {}

async def sparring_request_handler(message: types.Message):
    user_id = message.from_user.id
    pig = db.get_pig(user_id)

    if not pig:
        await message.answer("–¢–∏ —â–µ –Ω–µ –º–∞—î—à —Ö—Ä—è–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫ üêñ", callback_data=f"accept_sparring:{user_id}")

    pending_sparrings[user_id] = True

    await message.answer(
        f"üê∑ {pig.name} –≤–∏–∫–ª–∏–∫–∞—î –Ω–∞ —Å–ø–∞—Ä–∏–Ω–≥!\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫!",
        reply_markup=builder.as_markup()
    )

async def sparring_accept_handler(callback: types.CallbackQuery):
    await callback.answer()  # –û–±–æ–≤'—è–∑–∫–æ–≤–æ –æ–¥—Ä–∞–∑—É, —â–æ–± Telegram –Ω–µ –≤–∏–∫–∏–¥–∞–≤ –ø–æ–º–∏–ª–∫—É

    data = callback.data
    if not data.startswith("accept_sparring:"):
        return

    opponent_id = int(data.split(":")[1])
    challenger_id = callback.from_user.id

    if opponent_id == challenger_id:
        return await callback.message.answer("–ù–µ –º–æ–∂–Ω–∞ –ø—Ä–∏–π–º–∞—Ç–∏ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –≤–∏–∫–ª–∏–∫!")

    if opponent_id not in pending_sparrings:
        return await callback.message.answer("–¶–µ–π –≤–∏–∫–ª–∏–∫ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∞–±–æ –±—É–≤ –ø—Ä–∏–π–Ω—è—Ç–∏–π.")

    pig1 = db.get_pig(opponent_id)
    pig2 = db.get_pig(challenger_id)

    if not pig1 or not pig2:
        return await callback.message.answer("–û–¥–∏–Ω –∑ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –º–∞—î —Ö—Ä—è–∫–∞!")

    if pig1.health < 13 or pig2.health < 13:
        return await callback.message.answer("–£ –æ–¥–Ω–æ–≥–æ –∑ —Ö—Ä—è–∫—ñ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–¥–æ—Ä–æ–≤'—è –¥–ª—è —Å–ø–∞—Ä–∏–Ω–≥—É (–º—ñ–Ω—ñ–º—É–º 13 ‚ù§Ô∏è).")

    del pending_sparrings[opponent_id]
    await callback.message.edit_reply_markup(reply_markup=None)

    # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –±–æ—é –∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏ —ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –µ—Ç–∞–ø–∞–º–∏
    base_events = [
        f"{pig1.name} —Ä—ñ–∑–∫–æ –∞—Ç–∞–∫—É—î ‚Äî –∫–ª–∞—Å–∏—á–Ω–∏–π –ø–æ—á–∞—Ç–æ–∫!",
        f"{pig2.name} —É—Ö–∏–ª—è—î—Ç—å—Å—è —ñ —Ä–æ–±–∏—Ç—å –ø—ñ–¥—Å—ñ—á–∫—É!",
        f"–°—É—Ç–∏—á–∫–∞ –Ω–∞–±–∏—Ä–∞—î –æ–±–µ—Ä—Ç—ñ–≤, –≥—Ä–∏–º–ª—è—Ç—å –ø—ñ–¥–∫–æ–≤–∏ —ñ –∫–∞–ø–ª—é—Ç—å –ø—ñ—Ç...",
        f"{pig1.name} –ª–µ–¥—å –≤—Å—Ç–∏–≥–∞—î –∑—Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ —Ö–∏—Ç—Ä–∏–π –º–∞–Ω–µ–≤—Ä —Å—É–ø–µ—Ä–Ω–∏–∫–∞!",
        f"{pig2.name} —Ç–∏–º —á–∞—Å–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å–≤–æ—é –º–∞—Å—É –Ω–∞ –ø–æ–≤–Ω—É!",
        f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ {pig1.name} –≤–∏–¥–∞—î –∫–æ–º–±–æ!",
        f"{pig2.name} –Ω–∞ –º–∏—Ç—å –∑–∞–≤–º–∏—Ä–∞—î, –∞–ª–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤ —Å–æ–±—ñ —Å–∏–ª–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏!",
        f"–û—Å—Ç–∞–Ω–Ω—ñ–π —É–¥–∞—Ä... —Ö—Ç–æ –∂ –ø–µ—Ä–µ–º–æ–∂–µ?!"
    ]

    # –î–æ–¥–∞—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–¥—ñ–π (–º—ñ–Ω 5, –º–∞–∫—Å 8)
    fight_script = random.sample(base_events, k=random.randint(5, len(base_events)))

    for line in fight_script:
        await callback.message.answer(line)
        await asyncio.sleep(random.uniform(2.5, 4.5))

    # –§—ñ–Ω–∞–ª –±–æ—é
    winner, loser, xp_transfer = fight(pig1, pig2)
    db.save_pig(pig1)
    db.save_pig(pig2)

    result_text = (
        f"\nüèÅ –°–ø–∞—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: <b>{winner.name}</b>\n"
        f"‚ûï –û—Ç—Ä–∏–º–∞–Ω–æ {xp_transfer} XP\n"
        f"‚ûñ –ü—Ä–æ–≥—Ä–∞–≤ {xp_transfer} XP"
    )

    level_ups = check_level_up(winner)
    if level_ups > 0:
        result_text += f"\nüìà –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –Ω–∞ {level_ups}!"
        if winner.level in (5, 10, 20):
            result_text += f"\nüéñÔ∏è –ù–æ–≤–∏–π —Ä–∞–Ω–≥: {get_rank(winner)}!"

    await callback.message.answer(result_text, parse_mode="HTML")
