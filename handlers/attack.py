from aiogram import types
from storage import db
from services.pig_service import attack, check_level_up, get_rank, handle_death
from utils.pig_helpers import ensure_pig_exists
from utils.constants import ATTACK_LIMIT_PER_DAY
from datetime import datetime
import random

async def attack_handler(message: types.Message):
    user_id = message.from_user.id
    pig1 = await ensure_pig_exists(message, user_id)
    if not pig1:
        return

    if not message.reply_to_message:
        await message.answer("–©–æ–± –±–∏—Ç–∏—Å—è, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∫–æ–º–∞–Ω–¥–æ—é /attack.")
        return

    opponent_id = message.reply_to_message.from_user.id
    if opponent_id == user_id:
        await message.answer("–ù–µ –º–æ–∂–Ω–∞ –±–∏—Ç–∏—Å—è —ñ–∑ —Å–∞–º–∏–º —Å–æ–±–æ—é! ü§¶‚Äç‚ôÇÔ∏è")
        return

    pig2 = db.get_pig(opponent_id)
    if not pig2:
        await message.answer("–£ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–º–∞—î —Ö—Ä—è–∫–∞!")
        return

    today = datetime.now().strftime("%Y-%m-%d")
    if pig1.last_fight_date != today:
        pig1.fights_today = 0
        pig1.last_fight_date = today

    if pig1.fights_today >= ATTACK_LIMIT_PER_DAY:
        await message.answer("–¢–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –ø—Ä–æ–≤—ñ–≤ 3 –±–æ—ó! –í—ñ–¥–ø–æ—á–∏–≤–∞–π. üêñ")
        return

    winner = attack(pig1, pig2)
    winner.xp += 10 + random.randint(1, 9)
    pig1.fights_today += 1

    loser = pig2 if winner.user_id == pig1.user_id else pig1
    health_loss = 10 + random.randint(1, 9)
    loser.health = max(0, loser.health - health_loss)

    text_death = handle_death(loser)
    db.save_pig(pig1)
    db.save_pig(pig2)

    if winner.user_id == user_id:
        text = f"üéâ –¢–≤—ñ–π —Ö—Ä—è–∫ {pig1.name} –ø–µ—Ä–µ–º—ñ–≥ {pig2.name} —É –Ω–µ—á–µ—Å–Ω–æ–º—É –±–æ—é!"
    else:
        text = f"üò¢ –¢–≤–æ–≥–æ —Ö—Ä—è–∫–∞ {pig1.name} –ø–µ—Ä–µ–º—ñ–≥ {pig2.name}..."

    await message.answer(text)
    await message.answer(text_death or f"{loser.name} –≤—Ç—Ä–∞—Ç–∏–≤ {health_loss} ‚ù§Ô∏è.")

    level_ups, level_text = check_level_up(winner)
    if level_ups > 0:
        if winner.level in (5, 10, 20):
            level_text += f"\nüéñÔ∏è –í—ñ—Ç–∞—î–º–æ! –¢–≤—ñ–π —Ö—Ä—è–∫ –¥–æ—Å—è–≥ —Ä–∞–Ω–≥—É: {get_rank(winner)}!"
        db.save_pig(winner)
        await message.answer(level_text)