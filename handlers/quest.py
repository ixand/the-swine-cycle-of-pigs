from aiogram import types
from storage import db
from services.quest_service import apply_quest
from datetime import datetime, timedelta

async def quest_handler(message: types.Message):
    user_id = message.from_user.id
    pig = db.get_pig(user_id)

    if not pig:
        await message.answer("–¢–∏ —â–µ –Ω–µ –º–∞—î—à —Ö—Ä—è–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–≤–µ—Å—Ç—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏–Ω—É–ª–æ 4 –≥–æ–¥–∏–Ω–∏
    last_quest_time_str = getattr(pig, "last_quest_time", "")
    
    if last_quest_time_str:
        try:
            last_quest_time = datetime.strptime(last_quest_time_str, "%Y-%m-%d %H:%M:%S")
            time_diff = datetime.now() - last_quest_time
        except ValueError:
            # –Ø–∫—â–æ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞, —Ç–æ –¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–≤–µ—Å—Ç
            time_diff = timedelta(hours=999)
    else:
        time_diff = timedelta(hours=999)  # –Ø–∫—â–æ –∫–≤–µ—Å—Ç—É —â–µ –Ω–µ –±—É–ª–æ, –¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–π—à–ª–æ 4 –≥–æ–¥–∏–Ω–∏ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–≤–µ—Å—Ç—É
    if time_diff < timedelta(hours=4):
        remaining_time = timedelta(hours=4) - time_diff
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω —ñ —Ö–≤–∏–ª–∏–Ω –¥–ª—è –∑–∞–ª–∏—à–∫–æ–≤–æ–≥–æ —á–∞—Å—É
        hours_remaining = remaining_time.seconds // 3600
        minutes_remaining = (remaining_time.seconds % 3600) // 60
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await message.answer(f"–¢–∏ –º–æ–∂–µ—à –ø—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç –ª–∏—à–µ —á–µ—Ä–µ–∑ {hours_remaining} –≥–æ–¥–∏–Ω(–∏) —Ç–∞ {minutes_remaining} —Ö–≤–∏–ª–∏–Ω. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ –≥–æ–¥–∏–Ω.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ –∫–≤–µ—Å—Ç —Å—å–æ–≥–æ–¥–Ω—ñ
    last_quest_date_str = getattr(pig, "last_quest_date", "")
    last_quest_date = datetime.strptime(last_quest_date_str, "%Y-%m-%d") if last_quest_date_str else None
    today = datetime.now().date()

    if last_quest_date and last_quest_date == today:
        await message.answer("–¢–∏ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–≤ –∫–≤–µ—Å—Ç —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!")
        return

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–≤–µ—Å—Ç—É
    quest = apply_quest(pig)
    db.save_pig(pig)

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–≤–µ—Å—Ç—É
    pig.last_quest_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å
    pig.last_quest_date = datetime.now().strftime("%Y-%m-%d")  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç—É
    db.save_pig(pig)

    # –í–∏–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç –∫–≤–µ—Å—Ç—É —Ç–∞ –Ω–∞–≥–æ—Ä–æ–¥—É
    text = f"üéØ –ö–≤–µ—Å—Ç: *{quest['title']}*\n\n{quest['description']}\n\nüéÅ –ù–∞–≥–æ—Ä–æ–¥–∞: " + \
        ", ".join([f"+{v} {k}" for k, v in quest["effects"].items()])
    
    await message.answer(text, parse_mode="Markdown")
