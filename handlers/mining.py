from aiogram import types
from datetime import datetime, timedelta
import random
from storage import db

def can_mine(last_time_str: str) -> bool:
    if not last_time_str:
        return True
    last_time = datetime.strptime(last_time_str, "%Y-%m-%d %H:%M:%S")
    return datetime.now() - last_time > timedelta(minutes=0.1)

async def mining_handler(message: types.Message):
    user_id = message.from_user.id
    pig = db.get_pig(user_id)

    if not pig:
        await message.answer("–¢–∏ —â–µ –Ω–µ –º–∞—î—à —Ö—Ä—è–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start")
        return

    if not can_mine(pig.last_mining_time):
        await message.answer("‚õèÔ∏è –•—Ä—è–∫ —â–µ –≤—Ç–æ–º–ª–µ–Ω–∏–π –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–ø–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!")
        return

    # –°—Ü–µ–Ω–∞—Ä—ñ—ó –ø–µ—á–µ—Ä
    caves = [
        {"text": "–ü–µ—á–µ—Ä–∞ A: –•—Ä—è–∫ –∑–Ω–∞–π—à–æ–≤ 10 –∑–æ–ª–æ—Ç–∞!", "gold": 10},
        {"text": "–ü–µ—á–µ—Ä–∞ B: –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤...", "gold": 0},
        {"text": "–ü–µ—á–µ—Ä–∞ C: –•—Ä—è–∫ –≤–ø–∞–≤ —ñ –≤—Ç—Ä–∞—Ç–∏–≤ 10 ‚ù§Ô∏è!", "gold": 0, "damage": 10},
    ]
    result = random.choice(caves)
    text = result["text"]

    pig.gold += result.get("gold", 0)

    if "damage" in result:
        pig.health = max(1, pig.health - result["damage"])
        weight_loss = random.randint(10, 30)
        pig.weight = max(1, pig.weight - weight_loss)
        text += f"\nüí• –í—ñ–Ω —Ç–∞–∫–æ–∂ —Å—Ö—É–¥ –Ω–∞ {weight_loss} –∫–≥!"

    pig.last_mining_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    db.save_pig(pig)

    await message.answer(text)

