from models.pig import Pig
from datetime import datetime
import random

def init_pig(user_id: int) -> Pig:
    return Pig(user_id=user_id)

def feed_pig(pig: Pig):
    pig.weight += random.randint(1, 11)
    if random.randint(0, 9) < 2:
        pig.strength += 1
     # –ü—Ä–∏ –≥–æ–¥—É–≤–∞–Ω–Ω—ñ –¥–æ–¥–∞—î–º–æ –∑–¥–æ—Ä–æ–≤'—è
    health_increase = random.randint(5, 15) 
    pig.health = min(pig.health + health_increase, get_max_health(pig))
    pig.xp += 10 + random.randint(1, 5) 
    check_level_up(pig)

def calculate_age_in_months(birth_date: str) -> int:
    birth = datetime.strptime(birth_date, "%Y-%m-%d")
    now = datetime.now()
    return (now.year - birth.year) * 12 + now.month - birth.month

def get_allowed_feedings(pig: Pig) -> int:
    months = calculate_age_in_months(pig.birth_date)

    if months < 2:
        return 5  # –ü–æ—Ä–æ—Å—è—Ç–∞ –¥–æ 2 –º—ñ—Å—è—Ü—ñ–≤
    elif 2 <= months < 4:
        return 4  # –ü—ñ–¥—Å–≤–∏–Ω–∫–∏ 2-4 –º—ñ—Å
    elif 4 <= months < 6:
        return 3  # –°–≤–∏–Ω—ñ –Ω–∞ –≤—ñ–¥–≥–æ–¥—ñ–≤–ª—ñ
    else:
        return 2  # –î–æ—Ä–æ—Å–ª—ñ —Å–≤–∏–Ω—ñ
    
def attack(pig1: Pig, pig2: Pig) -> Pig:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –±–æ—é –º—ñ–∂ –¥–≤–æ–º–∞ —Ö—Ä—è–∫–∞–º–∏. –ü–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—è."""
    return random.choice([pig1, pig2])

def check_level_up(pig: Pig):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ –ø—ñ–¥–≤–∏—â—É—î —Ä—ñ–≤–µ–Ω—å —Ö—Ä—è–∫–∞, —è–∫—â–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ XP."""
    level_ups = 0

    while pig.xp >= 100:
        pig.level += 1
        pig.xp -= 100
        level_ups += 1

         # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å
        pig.strength += 1
        pig.health += 10

    return level_ups

def get_rank(pig: Pig) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä–∞–Ω–≥ —Ö—Ä—è–∫–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –π–æ–≥–æ —Ä—ñ–≤–Ω—è."""
    if pig.level >= 20:
        return "–õ–µ–≥–µ–Ω–¥–∞ —Ñ–µ—Ä–º–∏ üê≤"
    elif pig.level >= 10:
        return "–ú–æ–≥—É—Ç–Ω—ñ–π —Ö—Ä—è–∫ üêΩ"
    elif pig.level >= 5:
        return "–ú–æ–ª–æ–¥–∏–π –∫–∞–±–∞–Ω üêó"
    else:
        return "–ú–∞–ª–µ–Ω—å–∫–µ –ø–æ—Ä–æ—Å—è—Ç–∫–æ üêñ"
    
def get_max_health(pig: Pig) -> int:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–¥–æ—Ä–æ–≤'—è —Ö—Ä—è–∫–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è."""
    return 100 + (pig.level - 1) * 10

def fight(pig1: Pig, pig2: Pig):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç—å —Å–ø–∞—Ä–∏–Ω–≥ –∑–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—é —Ñ–æ—Ä–º—É–ª–æ—é —ñ –ø–æ–≤–µ—Ä—Ç–∞—î (–ø–µ—Ä–µ–º–æ–∂—Ü—è, –ø—Ä–æ–≥—Ä–∞–≤—à–æ–≥–æ, –ø–µ—Ä–µ–¥–∞–Ω–∏–π XP)."""
    score1 = pig1.level * pig1.strength * random.choice([0.5, 17.5]) + pig1.health
    score2 = pig2.level * pig2.strength * random.choice([0.5, 17.5]) + pig2.health

    if score1 > score2:
        winner, loser = pig1, pig2
    else:
        winner, loser = pig2, pig1

    xp_transfer = max(5, min(15, loser.xp // 5))  # –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤—ñ–¥ 5 –¥–æ 15 XP

    winner.xp += xp_transfer
    loser.xp = max(0, loser.xp - xp_transfer)

    return winner, loser, xp_transfer
